// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FirebaseDatabaseSwift
import FirebaseDatabase
@_exported import FirebaseDatabaseSwift
import FirebaseSharedSwift
import Foundation
import Swift
import _Concurrency
extension FirebaseDatabase.DatabaseReference {
  public func setValue<T>(from value: T, encoder: FirebaseDatabase.Database.Encoder = Database.Encoder(), completion: ((Swift.Error?) -> Swift.Void)? = nil) throws where T : Swift.Encodable
}
extension FirebaseDatabase.DataSnapshot {
  public func data<T>(as type: T.Type, decoder: FirebaseDatabase.Database.Decoder = Database.Decoder()) throws -> T where T : Swift.Decodable
}
extension FirebaseDatabase.Database {
  public typealias Encoder = FirebaseSharedSwift.FirebaseDataEncoder
  public typealias Decoder = FirebaseSharedSwift.FirebaseDataDecoder
}
@propertyWrapper public struct ServerTimestamp : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public init(wrappedValue value: Foundation.Date?)
  public var wrappedValue: Foundation.Date? {
    get
    set
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: FirebaseDatabaseSwift.ServerTimestamp, b: FirebaseDatabaseSwift.ServerTimestamp) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
